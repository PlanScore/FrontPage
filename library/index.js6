// this page's HTML template with the [hash] cache-buster and its stylesheet
require('./index.scss');
require('./index.src.html');

import { STATE_CODE_TO_NAME } from "/_common/constants";

// polyfills for this page's JavaScript needs
//require('core-js/fn/array/includes');

// bundle some local/vendor libraries for this page's JavaScript needs
//require('./js/leaflet-control-basemapbar.js');
//require('./js/leaflet-control-basemapbar.css');

//
// begin page-specific JavasScript
// anything goes: jQuery, ES2015, whatever you need
//

// the map uses a choropleth constructed from BELLCURVE_SPREAD
// but for nodata states, use this NODATA value and this color fill
const MAP_NODATA_VALUE = 999999;
const MAP_NODATA_FILLCOLOR = '#ffffff';
const MAP_NODATA_LABELCOLOR = '#cccccc';
const MAP_BORDER_COLOR = '#6E6E6E';

// the color of the state labels on the map
const MAP_LABELSIZE = '9px';
const MAP_LABELCOLOR = 'black';

// style for mouseover-ing the states on the map
const MAP_MOUSEOVER_COLOR = '#333333';
const MAP_MOUSEOVER_WIDTH = 2;

// the Esc key
const KEYCODE_ESC = 27;

$(document).ready(function () {
  initStatePicker();
  renderMap();
})

window.initStatePicker = () => {
  for (const [stateabbr, statename] of Object.entries(STATE_CODE_TO_NAME)) {
    const link_name = statename.toLowerCase().replace(/ /g,"_");

    $('#state-library-list').append(
      $("<li>").append($("<a>")
        .text(statename)
        .attr('href','/library/' + link_name)
        .attr('class', 'state-link')
        .click(goToStateLibraryIfExists)
      )
    );

    $('#states-list').append(
      $("<option>")
        .text(statename)
    );
  }

};

window.renderMap = () => {
    console.log('yo');

    // Highcharts trick: load up the us-small data (see the SCRIPT tag for usmapchart.json)
    // which includes breakout boxes for the small New England States (https://github.com/PlanScore/PlanScore/issues/78)
    // preprocess it to add the state's ABBR as the label for the boxes
    const polygons = Highcharts.geojson(Highcharts.maps['countries/us/custom/us-small']);
    const has_callout_boxes = [ 'NJ', 'MD', 'DE', 'CT', 'RI', 'MA', 'NH', 'VT' ];
    $.each(polygons, function () {
        var path = this.path, copy = { path: path };

        if (has_callout_boxes.indexOf(this.properties.postal) !== -1) {
            Highcharts.seriesTypes.map.prototype.getBox.call({}, [copy]);
            this.middleX = ((path[1] + path[4]) / 2 - copy._minX) / (copy._maxX - copy._minX); // eslint-disable-line no-underscore-dangle
            this.middleY = ((path[2] + path[7]) / 2 - copy._minY) / (copy._maxY - copy._minY); // eslint-disable-line no-underscore-dangle
        }
    });

    const newmapchart = Highcharts.mapChart('map', {
        chart: {
            borderWidth: 0,
            spacing: [ 0, 0, 0, 0 ],
        },
        credits: {
            enabled: false,
        },
        title: {
            text: '',  // no big title
        },
        legend: {
            enabled: false,  // we have a custom-crafted label
        },
        /*
        colorAxis: {
            dataClasses: map_choropleth_colors,
        },
        */
        tooltip: {
            enabled: false,
        },
        series: [{
            // use the Highcharts-provided US states, joining on their "postal" to our "abbr"
            data: [
                {abbr: 'CO', name: 'Colorado'},
                {abbr: 'MI', name: 'Michigan'},
            ],
            mapData: polygons,
            borderColor: MAP_BORDER_COLOR,
            joinBy: ['postal', 'abbr'],
            // labels make small states easier to see, cursor makes it obvious to click
            cursor: 'pointer',
            dataLabels: {
                enabled: true,
                formatter: function () {
                    if (this.point.value == MAP_NODATA_VALUE) {
                        return `<span style="color: ${MAP_NODATA_LABELCOLOR}">${this.point.abbr}</span>`;
                    }
                    else {
                        return this.point.abbr;
                    }
                },
                style: {
                    fontSize: MAP_LABELSIZE,
                    color: MAP_LABELCOLOR,
                    textOutline: false
                }
            },
            states: {
                hover: {
                    brightness: 0,
                    borderColor: MAP_MOUSEOVER_COLOR,
                    borderWidth: MAP_MOUSEOVER_WIDTH,
                }
            },
            // click events: call the popup maker
            events: {
                click: function (e) {
                    console.log('Clicked', e.point);

                    const link_name = e.point.name.toLowerCase().replace(/ /g,"_");
                    const moreinfourl = `/library/${link_name}/`;

                    /*
                    // in any case, log the selection before we go
                    logToGoogleAnalytics('selectlibrarystate', e.point.name);
                    */

                    if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {
                        window.open(moreinfourl);
                    }
                    else {
                        document.location.href = moreinfourl;
                    }
                }
            },
        }]
    });
};