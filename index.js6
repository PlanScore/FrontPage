// this page's HTML template with the [hash] cache-buster
// and the only stylesheet
require('./index.scss');
require('./index.src.html');

// shared constants between pages: the list of years, the red-blue color gradient, ...
import { PLAN_YEARS } from "./_common/constants";
import { STATE_CODE_TO_NAME } from "./_common/constants";
import { BELLCURVE_SPREAD } from "./_common/constants";
import { lookupBias } from "./_common/functions";

// bundle polyfills and local/vendor libraries specific to this page
//require('./js/leaflet-control-basemapbar.js');
//require('./js/leaflet-control-basemapbar.css');

//
// CONSTANTS
//

// the currently-visible state: boundary type + year, e.g. US House districts for 1984
// these are affected by window.selectXXX() family of functions which ultimately are all wrappers over loadDataForSelectedBoundaryAndYear()
const CURRENT_VIEW = {};

// year picker timeline animation; see yearAnimationToggle()
const ANIMATION = {
    delayseconds: 0.75,  // time delay (in seconds) between switches
    timer: undefined,  // if playing, an interval handle from setInterval(); else undefined
};

// the map uses a choropleth constructed from BELLCURVE_SPREAD
// but for nodata states, use this NODATA value and this color fill
const MAP_NODATA_VALUE = 999999;
const MAP_NODATA_FILLCOLOR = '#ffffff';
const MAP_NODATA_LABELCOLOR = '#cccccc';
const MAP_BORDER_COLOR = '#6E6E6E';

// the color of the state labels on the map
const MAP_LABELSIZE = '9px';
const MAP_LABELCOLOR = 'black';

// style for mouseover-ing the states on the map
const MAP_MOUSEOVER_COLOR = '#333333';
const MAP_MOUSEOVER_WIDTH = 2;

// the Esc key
const KEYCODE_ESC = 27;


//
// PAGE STARTUP / INIT FUNCTIONS
//

$(document).ready(function () {
    initYearPickers();
    initBoundaryPicker();
    initStatePopup();
    initTabMetricsTracking();
    initLoadStartingConditions();  // this will implicitly call loadDataForSelectedBoundaryAndYear() after setup, loading the map

    $(window).on('resize', handleResize);
    handleResize();
});

window.initTabMetricsTracking = () => {
    // when they switch metrics tabs, log a Google Analytics event
    $('#tabs-metrics a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        const whichtab = $(e.target).prop('href').replace(/.+#tab-/, '');  // the suffix is the metric name, e.g. #tab-efficiencygap
        logToGoogleAnalytics('metricread', whichtab);
    });
};

window.initStatePopup = () => {
    // the stateinfo popup is managed by selectState()
    // but we do want to add some event handlers

    // the popup's X button closes it
    $('#stateinfo-popup button').click(function () {
        selectState('');
    });

    // a keypress of the Esc key at any time, will close it
    $(window).on('keyup', function (event) {
        if (event.keyCode == KEYCODE_ESC) {
            selectState('');
        }
    });

    // a click anywhere on the page will close it (except within the popup, on the map, on a yearpicker, ...)
    $('#stateinfo-popup').click(function (event) {
        event.stopPropagation();
    });
    $('#yearpicker-big-wrapper').click(function (event) {  // the yearpicker line AND the play/pause button
        event.stopPropagation();
    });
    $('#yearpicker-small').click(function (event) {
        event.stopPropagation();
    });
    $('#boundarypicker').click(function (event) {
        event.stopPropagation();
    });
    $('#map').on('click', 'g', function (event) {  // only the visible map, within the whole #map
        event.stopPropagation();
    });
    $('html').click(function () {
        selectState('');
    });

    // selecting the state that is already selected, will also select nothing
    // that's actually done within selectState()
};

window.initYearPickers = () => {
    // there are 2 year pickers: mobile and desktop
    // desktop is a fancy series of HTML/CSS dots which can be clicked to select a year
    // mobile is a prev/next thing to cycle years with arrows
    // both of these connect to selectYear()

    const $picker_small = $('#yearpicker-small');
    const $year_listing = $picker_small.find('div.readout');
    PLAN_YEARS.forEach((year) => {
        $(`<span data-year="${year}">${year}</span>`).appendTo($year_listing).hide();
    });

    $picker_small.on('click', 'div.nextprev.right', function () {
        const $targetbutton = $year_listing.find('span:visible').next('span');
        const year = $targetbutton.attr('data-year');
        if (! year) return;  // don't allow clicking past the first/last
        selectYear(year);
        logToGoogleAnalytics('yearselected', year);
    });
    $picker_small.on('click', 'div.nextprev.left', function () {
        const $targetbutton = $year_listing.find('span:visible').prev('span');
        const year = $targetbutton.attr('data-year');
        if (! year) return;  // don't allow clicking past the first/last
        selectYear(year);
        logToGoogleAnalytics('yearselected', year);
    });

    const $picker_big = $('#yearpicker-big');
    PLAN_YEARS.forEach((year) => {
        // each button has some utility classes so we can call out certain landmark years
        // see also handleResize() which adjusts the full-width spacing behavior
        const $button = $('<div></div>').attr('data-year', year).prop('title', `Show efficiency gap analysis for ${year}`).appendTo($picker_big);
        if (year % 10 === 0) $button.addClass('decade');
        if (year % 10 === 2) $button.addClass('decplan');
        if (year % 4 === 0)  $button.addClass('presidential');

        $('<span class="currentyear"></span>').text(year).appendTo($button);
        $('<span class="currentyearline"></span>').appendTo($button);

        $('<a></a>').appendTo($button); // for styling and as a click magnet

        if (year % 10 === 2) {  // per 151 decennial plans come out the next cycle
            $('<span class="yearlabel"></span>').text(year).appendTo($button);
        }
    });
    $picker_big.on('click', 'div', function () {
        const year = $(this).attr('data-year');
        selectYear(year);
        logToGoogleAnalytics('yearselected', year);
    });

    // the big year picker also has a play/pause button to toggle the playing/paused status
    $('#yearpicker-big-playbutton a').click(function () {
        yearAnimationToggle();
    });
};

window.initBoundaryPicker = () => {
    $('#boundarypicker div[data-boundary]').click(function () {
        const boundarytype = $(this).attr('data-boundary');
        selectBoundaryType(boundarytype);
        logToGoogleAnalytics('boundarytype', boundarytype);
    });
};

window.initLoadStartingConditions = () => {
    // analyze the #year-polytype hash to see what year + type we should load
    // provide some defaults
    let year = PLAN_YEARS[PLAN_YEARS.length - 1];
    let type = 'statehouse';

    const year_and_type = /^#!(\d\d\d\d)\-(\w+)$/.exec(window.location.hash);
    if (year_and_type) {
        year = year_and_type[1];
        type = year_and_type[2];
    }

    // ready, set, go
    selectYear(year);
    selectBoundaryType(type);
};

window.handleResize = () => {
    // various things that don't gracefully handle being resized, so we need to help them out

    // the desktop "bead string" yearpicker; stretch the DIVs to fill the width
    const $picker_buttons = $('#yearpicker-big').find('div');
    const width = `${100 / $picker_buttons.length}%`;
    $picker_buttons.css({ width });
};


//
// RUNTIME FUNCTIONS FOR CHANGING YEAR + DISTRICT TYPE + STATE INFO
// loadDataForSelectedBoundaryAndYear() is the real worker here; the others are basically convenience functions
//

window.loadDataForSelectedBoundaryAndYear = (options={}) => {
    if (! CURRENT_VIEW.year || ! CURRENT_VIEW.boundtype) return;  // need both; during startup one will be blank, so avoid an error

    // options documentation
    // * fudgeYearIfNoData:true -- if no data for given boundary & year, select closest year which DOES have data and use that instead
    // * noHashUpdate:true -- suppress updating the #! hash in address bar

    // initialize the bias score statistics to No Data all around
    // expected data structure: list of states and their bias ratings
    const chartdata = [];
    for (const [stateabbr, statename] of Object.entries(STATE_CODE_TO_NAME)) {
        chartdata.push({
            abbr: stateabbr,
            name: statename,
            value: MAP_NODATA_VALUE,
            percentrank: null,
        });
    }

    // fetch the CSV file and then use the callbacks to update the map
    const url = `/data/bias_${CURRENT_VIEW.boundtype}.csv`;
    Papa.parse(url, {
        download: true,
        header: true,
        complete: function (results) {
            // https://github.com/PlanScore/PlanScore/issues/169, if fudgeYearIfNoData is enabled and we have no data for this year, pick another year
            // nearest year to our chosen which does have data, favoring more-recent year in event of a tie
            // primarily used when switching district types, as not all district types have the same coverage for every year (e.g. State House 2016)
            if (options.fudgeYearIfNoData) {
                const hasdata = results.data.filter((datarow) => { return datarow.year == CURRENT_VIEW.year; }).length;
                if (! hasdata) {
                    const wehavetheseyears = results.data.map((datarow) => {
                        return datarow.year ? parseInt(datarow.year) : 0;  // workaround for 176, iOS 11 including blank rows so year=NaN
                    });
                    wehavetheseyears.sort((p, q) => {
                        const px = Math.abs(p - parseInt(CURRENT_VIEW.year));
                        const qx = Math.abs(q - parseInt(CURRENT_VIEW.year));
                        return (px != qx) ? (px > qx ? 1 : -1) : (p > q ? -1 : 1); // order by diff from desired year; or else by higher-year if equal spread
                    });
                    let closestyear = wehavetheseyears[0];

                    // special behavior, https://github.com/PlanScore/PlanScore/issues/228
                    // if they selected State Senates 2004 or 2014, snap to 2002 or 2012 instead because we have more data there
                    // this will likely need to be updated a few times as we get more data and 2004 & 2014 become acceptably populated, and/or more data-poor years are added which we want to rewrite
                    if      (CURRENT_VIEW.boundtype == 'statesenate' && closestyear == 2014) closestyear = 2012;
                    else if (CURRENT_VIEW.boundtype == 'statesenate' && closestyear == 2004) closestyear = 2002;

                    // done, go ahead and select THIS year for them
                    setTimeout(function () {
                        selectYear(closestyear);
                    }, 1);
                    return;
                }
            }

            // https://github.com/PlanScore/PlanScore/issues/217: odd-numbered years
            // our whole yearpicker concept was based on even-numbered years,
            // but a few states have unusual cycles such as odd-numbered years, and some unusual cases e.g. KY which in 1981-1984 changed from odd-numbered to even-numbered
            // workaround here: rewrite any odd-numbered years to add 1 (1973 becomes 1974) so we still have even numbers
            // for this visual display having 1974 show the plan enacted in 1973 is sufficiently accurate
            results.data = results.data.map(function (datarow) {
                const year = parseInt(datarow.year);
                if (year % 2 == 1) datarow.year = String(year + 1);
                return datarow;
            });

            // filter by the year (geography is implicit by which CSV was fetched)
            // and for each row assign the bias score to the state's row in the above
            // this is loop-within-loop as we match arrays to arrays, but P=50 and Q=20ish so it's affordable
            results = results.data.forEach(function (datarow) {
                if (datarow.year != CURRENT_VIEW.year) return;  // wrong year; next
                const chartrow = chartdata.filter((filteringthisonerow) => { return filteringthisonerow.abbr == datarow.state; })[0];
                chartrow.value = parseFloat(datarow.eg_adj_avg);
                chartrow.percentrank = Math.round(100 * datarow.eg_avg_percentrank).toFixed(0);
            });
            renderMapWithNewData(chartdata);
            updateStateListingSwatches(chartdata);
            updateStateListingHashes(chartdata);
            if (! options.noHashUpdate) updateAddressHash();
            reloadStatePopup();
        },
        error: function () {
            // an error, meaning bad network or missing CSV
            // fortunately we constructed a "blank" structure above, and can roll with that
            renderMapWithNewData(chartdata);
            updateStateListingSwatches(chartdata);
            updateStateListingHashes(chartdata);
        },
    });

    function renderMapWithNewData(data) {
        // attach this raw data into the SVG so we can access it later
        // see also selectState() which needs to access the compiled data
        $('#map').data('biasdata', data);

        // loop through each state in the data and update the SVG
        data.forEach(function(stateData) {
            const stateAbbr = stateData.abbr;
            const stateValue = stateData.value;

            // find the SVG elements for this state
            const $shape = $(`#state-shape-${stateAbbr}`);
            const $label = $(`#state-label-${stateAbbr}`);
            const $offshoreBox = $(`#offshore-box-${stateAbbr}`);

            if ($shape.length === 0) return; // skip if state not found

            // determine fill color and label color based on data
            if (stateValue === MAP_NODATA_VALUE || stateValue === undefined) {
                // no data: gray fill, gray label
                $shape.css({
                    'fill': MAP_NODATA_FILLCOLOR,
                    'stroke': '#555',
                    'stroke-width': '1.0'
                });
                $label.css('fill', MAP_NODATA_LABELCOLOR);
                if ($offshoreBox.length > 0) {
                    $offshoreBox.css({
                        'fill': MAP_NODATA_FILLCOLOR,
                        'stroke': '#555',
                        'stroke-width': '1.0'
                    });
                }
            } else {
                // has data: color based on bias score, black label
                const biasInfo = lookupBias('eg', stateValue, CURRENT_VIEW.boundtype);
                $shape.css({
                    'fill': biasInfo.color,
                    'stroke': '#555',
                    'stroke-width': '1.0'
                });
                $label.css('fill', MAP_LABELCOLOR);
                if ($offshoreBox.length > 0) {
                    $offshoreBox.css({
                        'fill': biasInfo.color,
                        'stroke': '#555',
                        'stroke-width': '1.0'
                    });
                }
            }
        });

        // add click handlers if not already added
        if (!$('#map').data('handlers-attached')) {
            // click handlers for state shapes, offshore boxes, and labels
            $('.state-shape, .offshore-box, .state-label').on('click', function(e) {
                const stateAbbr = $(this).attr('id').replace('state-shape-', '').replace('offshore-box-', '').replace('state-label-', '');
                const stateInfo = data.find(d => d.abbr === stateAbbr);
                if (!stateInfo) return;

                // compose URL for the selected state + boundary + year
                const plan_or_election = 'plan';
                const stateslug = stateInfo.name.toLowerCase().replace(/\W/g, '_');
                const moreinfourl = `/${stateslug}/#!${CURRENT_VIEW.year}-${plan_or_election}-${CURRENT_VIEW.boundtype}`;

                // log the selection
                logToGoogleAnalytics('selectstate', stateInfo.name);

                // navigate (new window if modifier key held)
                if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {
                    window.open(moreinfourl);
                } else {
                    document.location.href = moreinfourl;
                }
            });

            // add hover effects
            $('.state-shape').on('mouseenter', function() {
                $(this).css({
                    'stroke': MAP_MOUSEOVER_COLOR,
                    'stroke-width': MAP_MOUSEOVER_WIDTH
                });
            }).on('mouseleave', function() {
                $(this).css({
                    'stroke': '#555',
                    'stroke-width': '1.0'
                });
            });

            // hover effects for offshore boxes
            $('.offshore-box').on('mouseenter', function() {
                $(this).css({
                    'stroke': MAP_MOUSEOVER_COLOR,
                    'stroke-width': MAP_MOUSEOVER_WIDTH
                });
            }).on('mouseleave', function() {
                $(this).css({
                    'stroke': '#555',
                    'stroke-width': '1.0'
                });
            });

            // add pointer cursor
            $('.state-shape, .offshore-box').css('cursor', 'pointer');

            $('#map').data('handlers-attached', true);
        }
    }

    function updateStateListingSwatches(data) {
        const $swatches = $('.states-listing span.swatch');
        $swatches.each(function () {
            // find this swatch's state name, and fetch that state info from the raw data
            const state_name = $(this).closest('a').text().trim();
            const state_info = data.filter((stateinfo) => { return stateinfo.name === state_name; }).slice(0, 1)[0];

            // find bias color and apply CSS
            const biaseval = lookupBias('eg', state_info.value, CURRENT_VIEW.boundtype);
            const words = biaseval.description;
            const color = biaseval.color;
            if (state_info.value === MAP_NODATA_VALUE || state_info.value === undefined) {
                $(this).prop('title', words) .css({ 'background-color': MAP_NODATA_FILLCOLOR, 'border':'1px solid #95989A' });
            }
            else {
                $(this).prop('title', words).css({ 'background-color': color });
            }
        });
    }

    function updateStateListingHashes(data) {
        const $swatches = $('.states-listing a');
        $swatches.each(function () {
            const $link             = $(this);
            const baseurl           = $link.prop('href').replace(/\#.*$/, '');
            const plan_or_election  = 'plan';
            const hashcomponent     = `#!${CURRENT_VIEW.year}-${plan_or_election}-${CURRENT_VIEW.boundtype}`;
            const url               = `${baseurl}${hashcomponent}`;
            $link.prop('href', url);
        });
    }
};

window.selectYear = (year, options={}) => {
    // UI update: big/desktop yearpicker
    // add class to the DIV so as to style elements: colored fill, visible label, ...
    $('#yearpicker-big div').removeClass('active').filter(`[data-year="${year}"]`).addClass('active');

    // UI update: small/mobile yearpicker
    // if the selected year is the first/last then show/hide the prev/next buttons
    const $small_button = $('#yearpicker-small span').hide().filter(`[data-year="${year}"]`).show();
    const $prevbutton = $('#yearpicker-small div.nextprev.left');
    const $nextbutton = $('#yearpicker-small div.nextprev.right');

    if ($small_button.is(':first-child')) $prevbutton.addClass('disabled');
    else                                  $prevbutton.removeClass('disabled');
    if ($small_button.is(':last-child'))  $nextbutton.addClass('disabled');
    else                                  $nextbutton.removeClass('disabled');

    // save to the state and refresh the map + data
    CURRENT_VIEW.year = year;

    loadDataForSelectedBoundaryAndYear(options);  // no new options nor overrides; just pass options as-given
};

window.selectBoundaryType = (boundtype, options={}) => {
    // UI update: highlight this button
    $('#boundarypicker div[data-boundary]').removeClass('active').filter(`[data-boundary="${boundtype}"]`).addClass('active');

    // save to the state and refresh the map + data
    // per 169 this invokes a new year-fudging should we encounter a no-data condition
    CURRENT_VIEW.boundtype = boundtype;

    options = Object.assign({  // add fudgeYearIfNoData option for this special case, but do allow overrides by the caller
        fudgeYearIfNoData: true
    }, options);
    loadDataForSelectedBoundaryAndYear(options);
};

window.reloadStatePopup = () => {
    const $modal = $('#stateinfo-popup');
    const isopen = $modal.is(':visible');
    const statecode = $modal.attr('data-state');
    if (statecode && isopen) {
        selectState(statecode, { closeIfSameState: false });
    }
};

window.selectState = (stateabbr, options={}) => {
    // default options, overridden by their passed options
    options = Object.assign({
        closeIfSameState: false,  // if the popover is already showing the state being requested, then close it instead
    }, options);

    const $modal = $('#stateinfo-popup');

    // passing empty/null stateabbr is how you explicitly select no state
    if (! stateabbr) {
        $modal.attr('data-state', '').hide();
        return;
    }

    // if the popup is visible and already showing this same state, then close it
    if ( options.closeIfSameState && $modal.is(':visible') && $modal.attr('data-state') == stateabbr) {
        $modal.attr('data-state', '').hide();
        return;
    }

    // fetch the info from the map, and attach some attributes for the popup
    // tip: shallow copy via slice() so as not to mutate the existing one
    const biasinfo = $('#map').data('biasdata').filter((statedata) => { return statedata.abbr === stateabbr; }).slice(0, 1)[0];

    // add to the info, an analysis
    if (biasinfo.value === undefined || biasinfo.value === MAP_NODATA_VALUE) {
        biasinfo.analysis = 'No data was available for this election year.';
    }
    else {
        const favor_party = lookupBias('eg', biasinfo.value, CURRENT_VIEW.boundtype).party;

        if (favor_party) {
            biasinfo.analysis = `This plan is more skewed than <b>${biasinfo.percentrank}%</b> of the enacted plans we have analyzed nationwide.`;
        }
        else {
            biasinfo.analysis = "No consistent skew was found in favor of either party.";
        }
    }

    // the URL for more info: the state name, mangled for URLs e.g. south_carolina
    // and with a hash for the current year + district:   #!2010-plan-ushouse
    // see the states page programming for details as to the expected hash params
    const plan_or_election = 'plan';
    const stateslug        = biasinfo.name.toLowerCase().replace(/\W/g, '_');
    const moreinfourl      = `/${stateslug}/#!${CURRENT_VIEW.year}-${plan_or_election}-${CURRENT_VIEW.boundtype}`;

    // open the popup and do the string replacements
    $modal.attr('data-state', stateabbr);
    $modal.show();
    $modal.find('span[data-field="statename"]').html(biasinfo.name);
    $modal.find('span[data-field="analysis"]').html(biasinfo.analysis);
    if (biasinfo.value && biasinfo.value !== MAP_NODATA_VALUE) {
        $modal.find('a.learnmore').prop('href', moreinfourl).show();
    }
    else {
        $modal.find('a.learnmore').hide();
    }
};

window.yearAnimationToggle = () => {
    if (ANIMATION.timer) {
        clearInterval(ANIMATION.timer);
        ANIMATION.timer = undefined;

        $('#yearpicker-big-playbutton a[data-status="paused"]').removeClass('hidden').siblings().addClass('hidden');

        updateAddressHash();  // per 135 #! update explicitly suppressed and explicitly requested on pause
    }
    else {
        ANIMATION.timer = setInterval(function () {
            const i = PLAN_YEARS.indexOf(parseInt(CURRENT_VIEW.year));
            let n = i + 1;
            if (n >= PLAN_YEARS.length) n = 0;  // loop back to if +1 would be past the end
            selectYear(PLAN_YEARS[n], { noHashUpdate: true});
        }, 1000 * ANIMATION.delayseconds);

        $('#yearpicker-big-playbutton a[data-status="playing"]').removeClass('hidden').siblings().addClass('hidden');
    }
};

window.updateAddressHash = () => {
    // see also initLoadStartingConditions() which will load such a state
    const hash = `#!${CURRENT_VIEW.year}-${CURRENT_VIEW.boundtype}`;
    window.location.replace(hash);
};

window.logToGoogleAnalytics = (eventtype, value) => {
    const actiontype = `frontpage-${eventtype}`;
    gtag('event', actiontype, {
        event_category: value,
    });
};
