// this page's HTML template with the [hash] cache-buster
// and the only stylesheet
require('./index.scss');
require('./index.src.html');

// shared constants between pages: the list of years, the red-blue color gradient, ...
import { PLAN_YEARS } from "./_common/constants";
import { STATE_CODE_TO_NAME } from "./_common/constants";
import { BIAS_SPREAD_SCALING } from "./_common/constants";
import { lookupBias } from "./_common/functions";

// bundle polyfills and local/vendor libraries specific to this page
//require('./js/leaflet-control-basemapbar.js');
//require('./js/leaflet-control-basemapbar.css');

//
// CONSTANTS
//

// the currently-visible state: boundary type + year, e.g. US House districts for 1984
// these are affected by window.selectXXX() family of functions which ultimately are all wrappers over loadDataForSelectedBoundaryAndYear()
const CURRENT_VIEW = {};


//
// PAGE STARTUP / INIT FUNCTIONS
//

$(document).ready(function () {
    initYearPickers();
    initBoundaryPicker();
    initStatePopup();
    initLoadStartingConditions();  // this will implicitly call loadDataForSelectedBoundaryAndYear() after setup, loading the map

    $(window).on('resize', handleResize);
    handleResize();
});

window.initStatePopup = () => {
    // the stateinfo popup is managed by selectState()
    // but we do want to add some event handlers: the X button to close it
    $('#stateinfo-popup button').click(function () {
        selectState('');
    });
};

window.initYearPickers = () => {
    // there are 2 year pickers: mobile and desktop
    // desktop is a fancy series of HTML/CSS dots which can be clicked to select a year
    // mobile is a prev/next thing to cycle years with arrows
    // both of these connect to selectYear()

    const $picker_small = $('#yearpicker-small');
    const $year_listing = $picker_small.find('div.readout');
    PLAN_YEARS.forEach((year) => {
        $(`<span data-year="${year}">${year}</span>`).appendTo($year_listing).hide();
    });

    $picker_small.on('click', 'div.nextprev.right', function () {
        const $targetbutton = $year_listing.find('span:visible').next('span');
        const year = $targetbutton.attr('data-year');
        if (! year) return;  // don't allow clicking past the first/last
        selectYear(year);
    });
    $picker_small.on('click', 'div.nextprev.left', function () {
        const $targetbutton = $year_listing.find('span:visible').prev('span');
        const year = $targetbutton.attr('data-year');
        if (! year) return;  // don't allow clicking past the first/last
        selectYear(year);
    });

    const $picker_big = $('#yearpicker-big');
    PLAN_YEARS.forEach((year) => {
        // each button has some utility classes so we can call out certain landmark years
        // see also handleResize() which adjusts the full-width spacing behavior
        const $button = $('<div></div>').attr('data-year', year).prop('title', `Show efficiency gap analysis for ${year}`).appendTo($picker_big);
        if (year % 10 === 0) $button.addClass('decade');
        if (year % 10 === 2) $button.addClass('decplan');
        if (year % 4 === 0)  $button.addClass('presidential');

//gda
        $('<span class="currentyear"></span>').text(year).appendTo($button);
        $('<span class="currentyearline"></span>').appendTo($button);

        $('<a></a>').appendTo($button); // for styling and as a click magnet

        if (year % 10 === 2) {  // per 151 decennial plans come out the next cycle
            $('<span class="yearlabel"></span>').text(year).appendTo($button);
        }
    });
    $picker_big.on('click', 'div', function () {
        const year = $(this).attr('data-year');
        selectYear(year);
    });
};

window.initBoundaryPicker = () => {
    $('#boundarypicker div[data-boundary]').click(function () {
        const boundarytype = $(this).attr('data-boundary');
        selectBoundaryType(boundarytype);
    });
};

window.initLoadStartingConditions = () => {
    // analyze the #year-polytype hash to see what year + type we should load
    // provide some defaults
    let year = PLAN_YEARS[PLAN_YEARS.length - 1];
    let type = 'ushouse';

    const year_and_type = /^#!(\d\d\d\d)\-(\w+)$/.exec(window.location.hash);
    if (year_and_type) {
        year = year_and_type[1];
        type = year_and_type[2];
    }

    // ready, set, go
    selectYear(year);
    selectBoundaryType(type);
};

window.handleResize = () => {
    // various things that don't gracefully handle being resized, so we need to help them out

    // the desktop "bead string" yearpicker; stretch the DIVs to fill the width
    const $picker_buttons = $('#yearpicker-big').find('div');
    const width = `${100 / $picker_buttons.length}%`;
    $picker_buttons.css({ width });
};


//
// RUNTIME FUNCTIONS FOR CHANGING YEAR + DISTRICT TYPE + STATE INFO
// loadDataForSelectedBoundaryAndYear() is the real worker here; the others are basically convenience functions
//

window.loadDataForSelectedBoundaryAndYear = (options={}) => {
    if (! CURRENT_VIEW.year || ! CURRENT_VIEW.boundtype) return;  // need both; during startup one will be blank, so avoid an error

    // initialize the bias score statistics to No Data all around
    // expected data structure: list of states and their bias ratings
    const chartdata = [];
    for (const [stateabbr, statename] of Object.entries(STATE_CODE_TO_NAME)) {
        chartdata.push({
            abbr: stateabbr,
            name: statename,
            value: null,
            percentrank: null,
        });
    }

    // fetch the CSV file and then use the callbacks to update the map
    const url = `/data/bias_${CURRENT_VIEW.boundtype}.csv`;
    Papa.parse(url, {
        download: true,
        header: true,
        complete: function (results) {
            // issue 169, if fudgeYearIfNoData is enabled and we have no data for this year, pick another year
            // nearest year to our chosen which does have data, favoring more-recent year in event of a tie
            if (options.fudgeYearIfNoData) {
                const hasdata = results.data.filter((datarow) => { return datarow.year == CURRENT_VIEW.year; }).length;
                if (! hasdata) {
                    const wehavetheseyears = results.data.map((datarow) => {
                        return parseInt(datarow.year);
                    });
                    wehavetheseyears.sort((p, q) => {
                        const px = Math.abs(p - parseInt(CURRENT_VIEW.year));
                        const qx = Math.abs(q - parseInt(CURRENT_VIEW.year));
                        return (px != qx) ? (px > qx ? 1 : -1) : (p > q ? -1 : 1); // order by diff from desired year; or else by higher-year if equal spread
                    });
                    const closestyear = wehavetheseyears[0];

                    setTimeout(function () {
                        selectYear(closestyear);
                    }, 1);
                    return;
                }
            }

            // filter by the year (geography is implicit by which CSV was fetched)
            // and for each row assign the bias score to the state's row in the above
            // this is loop-within-loop as we match arrays to arrays, but P=50 and Q=20ish so it's affordable
            results = results.data.forEach(function (datarow) {
                if (datarow.year != CURRENT_VIEW.year) return;  // wrong year; next
                const chartrow = chartdata.filter((filteringthisonerow) => { return filteringthisonerow.abbr == datarow.state; })[0];
                chartrow.value = parseFloat(datarow.eg_adj_avg);
                chartrow.percentrank = Math.round(100 * datarow.eg_avg_percentrank).toFixed(0);
            });
            renderMapWithNewData(chartdata);
            updateStateListingSwatches(chartdata);
            updateStateListingHashes(chartdata);
        },
        error: function () {
            // an error, meaning bad network or missing CSV
            // fortunately we constructed a "blank" structure above, and can roll with that
            renderMapWithNewData(chartdata);
            updateStateListingSwatches(chartdata);
            updateStateListingHashes(chartdata);
        },
    });

    function renderMapWithNewData(data) {
        // attach this raw data into the chart DIV so we can access it later
        // see also selectState() which needs to access the compiled data
        $('#map').data('biasdata', data);

        // Highcharts trick: load up the us-small data which includes breakout boxes for the small New England States (issue 78)
        // preprocess it to add the state's ABBR as the label for the boxes
        const polygons = Highcharts.geojson(Highcharts.maps['countries/us/custom/us-small']);
        const has_callout_boxes = [ 'NJ', 'MD', 'DE', 'CT', 'RI', 'MA', 'NH', 'VT' ];
        $.each(polygons, function () {
            var path = this.path, copy = { path: path };

            if (has_callout_boxes.indexOf(this.properties.postal) !== -1) {
                Highcharts.seriesTypes.map.prototype.getBox.call({}, [copy]);
                this.middleX = ((path[1] + path[4]) / 2 - copy._minX) / (copy._maxX - copy._minX); // eslint-disable-line no-underscore-dangle
                this.middleY = ((path[2] + path[7]) / 2 - copy._minY) / (copy._maxY - copy._minY); // eslint-disable-line no-underscore-dangle
            }
        });

        // Highcharts does color gradients but only min-to-max, and not the three-stops (red/white/blue) that we want
        // generate a Highcharts colorAxis.dataClasses sort-of constructed from our color ramp
        const map_choropleth_colors = [];
        const slice_step = 0.05 * BIAS_SPREAD_SCALING;
        for (let slice_lower = -BIAS_SPREAD_SCALING; slice_lower < BIAS_SPREAD_SCALING; slice_lower += slice_step) {
            map_choropleth_colors.push({
                from: slice_lower,
                to: slice_lower + slice_step,
                color: lookupBias(slice_lower + 0.5 * slice_step).color,  // middle score for this slice's range
            });
        }

        // render the map chart
        // if we already did one, then we can just replace the chart.series[0] and not completely destroy and recreate the chart
        // on browsers other than Chrome this is a substantial performance gain
        let chart = $('#map').data('mapchart');
        if (chart) {
            // a chart already exists; just update its data
            chart.series[0].setData(data);
        }
        else {
            // a chart has not yet been created; create it and then stow that reference
            const newmapchart = Highcharts.mapChart('map', {
                chart: {
                    borderWidth: 0,
                    spacing: [ 0, 0, 0, 0 ],
                },
                title: {
                    text: '',  // no big title
                },
                legend: {
                    enabled: false,  // we have a custom-crafted label
                },
                colorAxis: {
                    dataClasses: map_choropleth_colors,
                },
                tooltip: {
                    enabled: false,
                },
                series: [{
                    // use the Highcharts-provided US states, joining on their "postal" to our "abbr"
                    data: data,
                    mapData: polygons,
                    joinBy: ['postal', 'abbr'],
                    // labels make small states easier to see, cursor makes it obvious to click
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        formatter: function () {
                            return this.point.abbr;
                        },
                        style: {
                            fontSize: '9px',
                            color: 'black',
                            textOutline: false
                        }
                    },
                    nullColor: 'white',
                    states: {
                        hover: {
                            brightness: 0,
                            borderColor: '#333333',
                            borderWidth: 2
                        }
                    },
                    // click events: call the popup maker
                    events: {
                        click: function (e) {
                            selectState(e.point.abbr);
                        }
                    },
                }]
            });

            // stow it for later retrieval
            $('#map').data('mapchart', newmapchart);
        }
    }

    function updateStateListingSwatches(data) {
        const $swatches = $('.states-listing span.swatch');
        $swatches.each(function () {
            // find this swatch's state name, and fetch that state info from the raw data
            const state_name = $(this).closest('a').text().trim();
            const state_info = data.filter((stateinfo) => { return stateinfo.name === state_name; }).slice(0, 1)[0];

            // find bias color and apply CSS
            const words = lookupBias(state_info.value).description;
            const color = lookupBias(state_info.value).color;
            if (state_info.value === null) $(this) .prop('title', words) .css({ 'background-color': color, 'border':'1px solid #95989A' });
            else if (state_info.value === undefined) $(this) .prop('title', words) .css({ 'background-color': color, 'border':'1px solid #95989A' });
            else $(this) .prop('title', words) .css({ 'background-color': color });
        });
    }

    function updateStateListingHashes(data) {
        const $swatches = $('.states-listing a');
        $swatches.each(function () {
            const $link             = $(this);
            const baseurl           = $link.prop('href').replace(/\#.*$/, '');
            const plan_or_election  = 'plan';
            const hashcomponent     = `#!${CURRENT_VIEW.year}-${plan_or_election}-${CURRENT_VIEW.boundtype}`;
            const url               = `${baseurl}${hashcomponent}`;
            $link.prop('href', url);
        });
    }

    // update URL params to show the current search
    // see also initLoadStartingConditions() which will load such a state
    const hash = `#!${CURRENT_VIEW.year}-${CURRENT_VIEW.boundtype}`;
    window.location.replace(hash);
};

window.selectYear = (year) => {
    // UI update: big/desktop yearpicker
    // add class to the DIV so as to style elements: colored fill, visible label, ...
//gda
    $('#yearpicker-big div').removeClass('active').filter(`[data-year="${year}"]`).addClass('active');

    // UI update: small/mobile yearpicker
    // if the selected year is the first/last then show/hide the prev/next buttons
    const $small_button = $('#yearpicker-small span').hide().filter(`[data-year="${year}"]`).show();
    const $prevbutton = $('#yearpicker-small div.nextprev.left');
    const $nextbutton = $('#yearpicker-small div.nextprev.right');

    if ($small_button.is(':first-child')) $prevbutton.addClass('disabled');
    else                                  $prevbutton.removeClass('disabled');
    if ($small_button.is(':last-child'))  $nextbutton.addClass('disabled');
    else                                  $nextbutton.removeClass('disabled');

    // save to the state and refresh the map + data
    CURRENT_VIEW.year = year;
    loadDataForSelectedBoundaryAndYear();
};

window.selectBoundaryType = (boundtype) => {
    // UI update: highlight this button
    $('#boundarypicker div[data-boundary]').removeClass('active').filter(`[data-boundary="${boundtype}"]`).addClass('active');

    // save to the state and refresh the map + data
    // per 169 this invokes a new year-fudging should we encounter a no-data condition
    CURRENT_VIEW.boundtype = boundtype;
    loadDataForSelectedBoundaryAndYear({
        fudgeYearIfNoData: true
    });
};

window.selectState = (stateabbr) => {
    // note that blank is an acceptable option to select no state at all
    if (! stateabbr) stateabbr = '';

    // passing empty/null stateabbr is how you explicitly select no state
    if (! stateabbr) {
        $('#stateinfo-popup').hide();
        return;
    }

    // fetch the info from the map, and attach some attributes for the popup
    // tip: shallow copy via slice() so as not to mutate the existing one
    const biasinfo = $('#map').data('biasdata').filter((statedata) => { return statedata.abbr === stateabbr; }).slice(0, 1)[0];

    // add to the info, an analysis
    if (biasinfo.value === undefined || biasinfo.value === null) {
        biasinfo.analysis = 'No data was available for this election year.';
    }
    else {
        const favor_party = lookupBias(biasinfo.value).party;

        if (favor_party) {
            biasinfo.analysis = `This plan is more biased than <b>${biasinfo.percentrank}%</b> of the enacted plans we have analyzed nationwide.`;
        }
        else {
            biasinfo.analysis = "No consistent bias was found in favor of either party.";
        }
    }

    // the URL for more info: the state name, mangled for URLs e.g. south_carolina
    // and with a hash for the current year + district:   #!2010-plan-ushouse
    // see the states page programming for details as to the expected hash params
    const plan_or_election = 'plan';
    const stateslug        = biasinfo.name.toLowerCase().replace(/\W/g, '_');
    const moreinfourl      = `/${stateslug}/#!${CURRENT_VIEW.year}-${plan_or_election}-${CURRENT_VIEW.boundtype}`;

    // open the popup and do the string replacements
    const $modal = $('#stateinfo-popup').show();
    $modal.find('span[data-field="statename"]').html(biasinfo.name);
    $modal.find('span[data-field="analysis"]').html(biasinfo.analysis);
    $modal.find('a.learnmore').prop('href', moreinfourl);
};

//
// OTHER RUNTIME FUNCTIONS
//
