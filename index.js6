// this page's HTML template with the [hash] cache-buster
// and the only stylesheet
require('./index.scss');
require('./index.src.html');

// polyfills
//require('core-js/fn/array/includes');

// bundle some local/vendor libraries
//require('./js/leaflet-control-basemapbar.js');
//require('./js/leaflet-control-basemapbar.css');

//
// CONSTANTS
//

// the currently-visible state: boundary type + year, e.g. US House districts for 1984
// these are affected by window.selectXXX() family of functions which ultimately are all wrappers over loadDataForSelectedBoundaryAndYear()
const CURRENT_VIEW = {};

// the list of years to offer; used by the year picker so the user may choose dates
// note that not every state has data at all levels for every year
const PLAN_YEARS = [
    1972, 1974, 1976, 1978,
    1980, 1982, 1984, 1986, 1988, 
    1990, 1992, 1994, 1996, 1998,
    2000, 2002, 2004, 2006, 2008, 
    2010, 2012, 2014, 2016,
];

// the list of states, for mapping ABBR => NAME, for populating selectors, ...
const STATES = {
    'AL': 'Alabama',
    'AK': 'Alaska',
    'AZ': 'Arizona',
    'AR': 'Arkansas',
    'CA': 'California',
    'CO': 'Colorado',
    'CT': 'Connecticut',
    'DE': 'Delaware',
    'FL': 'Florida',
    'GA': 'Georgia',
    'HI': 'Hawaii',
    'ID': 'Idaho',
    'IL': 'Illinois',
    'IN': 'Indiana',
    'IA': 'Iowa',
    'KS': 'Kansas',
    'KY': 'Kentucky',
    'LA': 'Louisiana',
    'ME': 'Maine',
    'MD': 'Maryland',
    'MA': 'Massachusetts',
    'MI': 'Michigan',
    'MN': 'Minnesota',
    'MS': 'Mississippi',
    'MO': 'Missouri',
    'MT': 'Montana',
    'NE': 'Nebraska',
    'NV': 'Nevada',
    'NH': 'New Hampshire',
    'NJ': 'New Jersey',
    'NM': 'New Mexico',
    'NY': 'New York',
    'NC': 'North Carolina',
    'ND': 'North Dakota',
    'OH': 'Ohio',
    'OK': 'Oklahoma',
    'OR': 'Oregon',
    'PA': 'Pennsylvania',
    'RI': 'Rhode Island',
    'SC': 'South Carolina',
    'SD': 'South Dakota',
    'TN': 'Tennessee',
    'TX': 'Texas',
    'UT': 'Utah',
    'VT': 'Vermont',
    'VA': 'Virginia',
    'WA': 'Washington',
    'WV': 'West Virginia',
    'WI': 'Wisconsin',
    'WY': 'Wyoming',
};

// for the map choropleth, the bias numbers fitting into each colorful bucket
const MAP_CHOROPLETH_BREAKS = [
    { from: -999999, to: -100, color: '#FFFFFF', name: 'No Data' },
    { from: -100, to: -0.20, color: '#C71C36', name: 'Highest R' },
    { from: -0.20, to: -0.10, color: '#D95F72', name: 'High R' },
    { from: -0.10, to: -0.05, color: '#E8A2AD', name: 'Somewhat R' },
    { from: -0.05, to: -0.02, color: '#F5D7DC', name: 'Slightly R' },
    { from: -0.02, to: 0.02, color: '#F2E5FA', name: 'Balanced' },
    { from: 0.02, to: 0.05, color: '#D7E4F5', name: 'Slightly D' },
    { from: 0.05, to: 0.10, color: '#99B7DE', name: 'Somewhat D' },
    { from: 0.10, to: 0.20, color: '#4C7FC2', name: 'High D' },
    { from: 0.20, to: 100, color: '#0049A8', name: 'Highest D' },
];

// when generating tooltips, a certain skew will be considered balanced and below statistical significance
// this would correspond to the Balanced choropleth break defined above (+X to -X is still balanced)
const BIAS_BALANCED_THRESHOLD = 0.02;

//
// PAGE STARTUP / INIT FUNCTIONS
//

$(document).ready(function () {
    initYearPickers();
    initStatePicker();
    initBoundaryPicker();
    initLoadStartingConditions();

    $(window).on('resize', handleResize);
    handleResize();
});

window.initYearPickers = () => {
    // there are 2 year pickers: mobile and full-size
    // mobile is a simple SELECT element and changing it selects a year
    // desktop is a fancy series of HTML/CSS dots which can be clicked to select a year
    // both of these connect to selectYear()

    const $picker_small = $('#yearpicker-small');
    PLAN_YEARS.slice().reverse().forEach((year) => {
        $('<option></option>').text(year).prop('value', year).appendTo($picker_small);
    });
    $picker_small.change(function () {
        const year = $(this).val();
        selectYear(year);
    });

    const $picker_big = $('#yearpicker-big');
    PLAN_YEARS.forEach((year) => {
        // each button has some utility classes so we can call out certain landmark years
        // also relevant is resizeWindow() which adjusts the full-width spacing behavior
        const $button = $('<a></a>').attr('data-year', year).prop('href', '#').prop('title', `Show partisan bias analysis for ${year}`).appendTo($picker_big);
        if (year % 10 === 0) $button.addClass('decade');
        if (year % 4 === 0) $button.addClass('presidential');
    });
    $picker_big.on('click', 'a', function () {
        const year = $(this).attr('data-year');
        selectYear(year);
    });
};

window.initStatePicker = () => {
    // state picker is the UI for selectState() to show a popup for the given state
    const $picker = $('#statepicker');
    $('<option></option>').text('(select state)').prop('value', '').appendTo($picker);
    for (const [stateabbr, statename] of Object.entries(STATES)) {
        $('<option></option>').text(statename).prop('value', stateabbr).appendTo($picker);
    }

    $picker.change(function () {
        const stateabbr = $(this).val();
        selectState(stateabbr);
    });
};

window.initBoundaryPicker = () => {
    $('#boundarypicker div').click(function () {
        const boundarytype = $(this).attr('data-boundary');
        selectBoundaryType(boundarytype);
    });
};

window.initLoadStartingConditions = () => {
    // the most recent year and the first listed district type; select them for us
    selectYear(PLAN_YEARS[PLAN_YEARS.length - 1]);
    selectBoundaryType('ushouse');
    loadDataForSelectedBoundaryAndYear();
};

window.handleResize = () => {
    // various things that don't gracefully handle being resized, so we need to help them out

    // the big year picker is a series of dots, and we want it to span the screen
    const $picker_big = $('#yearpicker-big');
    const $picker_big_buttons = $picker_big.find('a');
    let usable_width = $picker_big.width();
    $picker_big_buttons.each(function () {
        usable_width -= ( 5 + $(this).width());
    });
    const rightspace = Math.floor(usable_width / ($picker_big_buttons.length));
    $picker_big_buttons.css({
        'margin-right': `${rightspace}px`,
    });
};


//
// RUNTIME FUNCTIONS FOR CHANGING YEAR + DISTRICT TYPE + STATE INFO
// loadDataForSelectedBoundaryAndYear() is the real worker here; the others are basically convenience functions
//

window.loadDataForSelectedBoundaryAndYear = () => {
    if (! CURRENT_VIEW.year || ! CURRENT_VIEW.boundtype) return;  // need both; during startup one will be blank, so avoid an error

    console.log([ 'loadDataForSelectedBoundaryAndYear', CURRENT_VIEW.year, CURRENT_VIEW.boundtype ]);

    //gda
    // expected data structure: list of states and their bias ratings
    // <0 = R bias, >0 = D bias, -999999 = No Data
    const data = [
    { "value": 0.07, "abbr": "NJ" },
    { "value": -0.03,  "abbr": "RI" },
    { "value": 0.35,  "abbr": "MA" },
    { "value": 0.10,  "abbr": "CT" },
    { "value": -0.07,  "abbr": "MD" },
    { "value": 0.18,  "abbr": "NY" },
    { "value": 0.22,  "abbr": "DE" },
    { "value": 0.01,  "abbr": "FL" },
    { "value": 0.05,  "abbr": "OH" },
    { "value": -0.01,  "abbr": "PA" },
    { "value": -0.04,  "abbr": "IL" },
    { "value": -0.05,  "abbr": "CA" },
    { "value": 0.03,  "abbr": "HI" },
    { "value": 0.06,  "abbr": "VA" },
    { "value": -0.10,  "abbr": "MI" },
    { "value": -0.15,  "abbr": "IN" },
    { "value": 0.14,  "abbr": "NC" },
    { "value": 0.18,  "abbr": "GA" },
    { "value": 0.03,  "abbr": "TN" },
    { "value": -0.04,  "abbr": "NH" },
    { "value": -999999,  "abbr": "SC" },
    { "value": -0.04,  "abbr": "LA" },
    { "value": -0.05,  "abbr": "KY" },
    { "value": 0.12,  "abbr": "WI" },
    { "value": 0.13,  "abbr": "WA" },
    { "value": -0.13,  "abbr": "AL" },
    { "value": -0.09,  "abbr": "MO" },
    { "value": -0.10,  "abbr": "TX" },
    { "value": 0.11,  "abbr": "WV" },
    { "value": 0.21,  "abbr": "VT" },
    { "value": -0.11,  "abbr": "MN" },
    { "value": 0.21,  "abbr": "MS" },
    { "value": 0.07,  "abbr": "IA" },
    { "value": -0.03,  "abbr": "AR" },
    { "value": 0.04,  "abbr": "OK" },
    { "value": 0.02,  "abbr": "AZ" },
    { "value": 0.01,  "abbr": "CO" },
    { "value": -0.01,  "abbr": "ME" },
    { "value": -0.02,  "abbr": "OR" },
    { "value": 0.03,  "abbr": "KS" },
    { "value": 0.01,  "abbr": "UT" },
    { "value": 0.11,  "abbr": "NE" },
    { "value": -999999,  "abbr": "NV" },
    { "value": 0.06,  "abbr": "ID" },
    { "value": 0.15,  "abbr": "NM" },
    { "value": -0.14,  "abbr": "SD" },
    { "value": 0.07,  "abbr": "ND" },
    { "value": -0.07,  "abbr": "MT" },
    { "value": -0.09,  "abbr": "WY" },
    { "value": 0.14,  "abbr": "AK" }
];

    // attach this raw data into the chart DIV s we can access it later
    // see also selectState() which needs to access the compiled data
    $('#map').data('biasdata', data);

    // render the map chart
    Highcharts.mapChart('map', {
        chart: {
            borderWidth: 0,
        },
        title: {
            text: '',  // no big title
        },
        legend: {
            enabled: false,  // we have a custom-crafted label
        },

        colorAxis: {
            dataClasses: MAP_CHOROPLETH_BREAKS,
        },

        tooltip: {  // the tooltips are kept minimal, as most info is in a popup when clicked and mobile folks can't use tooltips effectively
            formatter: function() {
                if (this.point.value === -999999) return `${this.key}: No data`;
                return `${this.key}: Click for details`;
            },
        },

        series: [{
            // use the Highcharts-provided US states, joining on their "postal-code" to our "abbr"
            data: data,
            mapData: Highcharts.maps['countries/us/us-all'],
            joinBy: ['postal-code', 'abbr'],

            // click events: call the popup maker
            events: {
                click: function (e) {
                    selectState(e.point.abbr);
                }
            },
        }]
    });
};

window.selectYear = (year) => {
    // UI update: highlight this button
    $('#yearpicker-big a').removeClass('active').filter(`[data-year="${year}"]`).addClass('active');

    // save to the state and refresh the map + data
    CURRENT_VIEW.year = year;
    loadDataForSelectedBoundaryAndYear();
};

window.selectBoundaryType = (boundtype) => {
    // UI update: highlight this button
    $('#boundarypicker div').removeClass('active').filter(`[data-boundary="${boundtype}"]`).addClass('active');

    // save to the state and refresh the map + data
    CURRENT_VIEW.boundtype = boundtype;
    loadDataForSelectedBoundaryAndYear();
};

window.selectState = (stateabbr) => {
    // note that blank is an acceptable option to select no state at all
    if (! stateabbr) stateabbr = '';

    // UI update: set the selector
    $('#statepicker').val(stateabbr);

    //gda
    // show the popup
    
    if (stateabbr) {
        // fetch the info from the map, and attach some attributes for the popup
        // tip: shallow copy via slice() so as not to mutate the existing one
        const biasinfo = $('#map').data('biasdata').filter((statedata) => { return statedata.abbr === stateabbr; }).slice(0, 1)[0];
        biasinfo.name = STATES[biasinfo.abbr];

        // add to the info, an analysis
        if (biasinfo.value === -999999) {
            biasinfo.analysis = 'No data available.';
        }
        else if (Math.abs(biasinfo.value) <= BIAS_BALANCED_THRESHOLD) {
            biasinfo.analysis = `This plan shows no statistically significant skew toward either party.`;
        }
        else if (biasinfo.value < 0) {  // R bias
            biasinfo.analysis = `This plan is <b>${Math.round(Math.abs(biasinfo.value) * 100)}%</b> biased in favor of <b>Republican</b> outcomes`;
        }
        else {  // must be + bias
            biasinfo.analysis = `This plan is <b>${Math.round(Math.abs(biasinfo.value) * 100)}%</b> biased in favor of <b>Democrat</b> outcomes`;
        }

        // open the modal and do the string replacements
        const $modal = $('#stateinfo-modal').modal('show');
        $modal.find('span[data-field="statename"]').html(biasinfo.name);
        $modal.find('span[data-field="analysis"]').html(biasinfo.analysis);
    }
    else {
        // nothing to do, except I guess close the modal if it happens to be open
        $('#stateinfo-modal').modal('hide');
    }
};

//
// OTHER RUNTIME FUNCTIONS
//
